#count inversion
#a=[2,4,1,3]
#count=0
#for i in range(len(a)):
#   for j in range(1,len(a)):
#        if a[i]>a[j] and i<j:
#            a[i],a[j]=a[j],a[i]
#            print(a)
#            count+=1
#print(count)
# 'TLE'

  
def merge(arr,temp_arr,left,mid,right):
    i=left
    j=mid+1
    k=left
    invert_count=0
    while i<=mid and j<=right:
        if arr[i]<=arr[j]:
            temp_arr[k]=arr[i]
            i+=1
        else:
            temp_arr[k]=arr[j]
            invert_count+=(mid-i+1)
            j+=1
        k+=1
    while i<=mid:
        temp_arr[k]=arr[i]
        i+=1
        k+=1
    while j<=right:
        temp_arr[k]=arr[j]
        j+=1
        k-=1
    for i in range(left,right+1):
        arr[i]=temp_arr[i]
    return invert_count
def merge_sort_and_count(arr,tem_arr,left,right):
    invert_count=0
    if left<right:
        mid=(left+right)//2
        invert_count+=merge_sort_and_count(arr,tem_arr,left,mid)
        invert_count+=merge_sort_and_count(arr,tem_arr,mid+1,right)
        invert_count+= merge(arr,tem_arr,left,mid,right)
    return invert_count
def count_inversions(arr):
    n=len(arr)
    temp_arr=[0]*n
    return merge_sort_and_count(arr,temp_arr,0,n-1)
arr=[1,20,6,4,5]

print("nmber of inversion required :",count_inversions(arr))









