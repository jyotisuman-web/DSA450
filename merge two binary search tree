# Class for a single Node in the BST
class Node:
    def __init__(self, key):
        self.data = key
        self.left = None
        self.right = None

# Function to perform inorder traversal of a BST and store result in a list
def inorder(root, arr):
    if root:
        inorder(root.left, arr)
        arr.append(root.data)
        inorder(root.right, arr)

# Function to merge two sorted arrays into one
def mergeArrays(arr1, arr2):
    merged = []
    i = j = 0
    while i < len(arr1) and j < len(arr2):
        if arr1[i] < arr2[j]:
            merged.append(arr1[i])
            i += 1
        else:
            merged.append(arr2[j])
            j += 1
    
    # Append remaining elements
    while i < len(arr1):
        merged.append(arr1[i])
        i += 1
    
    while j < len(arr2):
        merged.append(arr2[j])
        j += 1
    
    return merged

# Function to build a balanced BST from a sorted array
def sortedArrayToBST(arr):
    if not arr:
        return None
    mid = len(arr) // 2
    root = Node(arr[mid])
    root.left = sortedArrayToBST(arr[:mid])
    root.right = sortedArrayToBST(arr[mid+1:])
    return root

# Function to merge two BSTs
def mergeBSTs(root1, root2):
    # Step 1: Get inorder traversal of both BSTs
    arr1 = []
    inorder(root1, arr1)
    
    arr2 = []
    inorder(root2, arr2)
    
    # Step 2: Merge the two sorted arrays
    mergedArray = mergeArrays(arr1, arr2)
    
    # Step 3: Convert the merged sorted array into a balanced BST
    return sortedArrayToBST(mergedArray)

# Function to print inorder traversal of the BST
def printInorder(root):
    if root:
        printInorder(root.left)
        print(root.data, end=" ")
        printInorder(root.right)

# Create two BSTs
root1 = Node(10)
root1.left = Node(5)
root1.right = Node(20)

root2 = Node(15)
root2.left = Node(12)
root2.right = Node(30)

# Merge the two BSTs
mergedRoot = mergeBSTs(root1, root2)

# Print inorder traversal of the merged BST
print("Inorder traversal of merged BST:")
printInorder(mergedRoot)
